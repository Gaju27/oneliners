(lambda grid=[[0,3,0,0,1,0,0,6,0],[7,5,0,0,3,0,0,4,8],[0,0,6,9,8,4,3,0,0],[0,0,3,0,0,0,8,0,0],[9,1,2,0,0,0,6,7,4],[0,0,4,0,0,0,5,0,0],[0,0,1,6,7,5,2,0,0],[6,8,0,0,9,0,0,1,5],[0,9,0,0,4,0,0,3,0]]:(lambda possible=(lambda x,y,n:not(any(n in(grid[y][i],grid[i][x])for i in range(9)) or any(grid[((y//3)*3)+i][((x//3)*3)+j]==n for i in range(3)for j in range(3)))):(lambda solve=(lambda f:lambda *a,**k:f(f,*a,**k))(lambda this:[None for _ in __import__('itertools').takewhile((lambda t:(lambda y=t[0],x=t[1]:([(grid[y].pop(x),grid[y].insert(x,n),this(this),grid[y].pop(x),grid[y].insert(x,0),None)[-1]if grid[y][x]==0 and possible(x,y,n)else None for n in range(1,10)],(print(grid)if x==y==8 and grid[8][8]else None,grid[y][x]!=0)[1])[1])()),((y,x)for y in range(9)for x in range(9)))]):solve())())())()